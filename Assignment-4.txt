33.	Write a program to demonstrate functionalities of this keyword in java. 
->
import java.lang.*;
import java.util.*;

class Student {
    int rollno;
    String name;
    
    void setData(int rollno, String name)  {
        this.rollno = rollno;
        this.name = name;
    }
    
    void showData() {
        System.out.println("RollNo. : "+rollno+"\nName : "+name);
    }
} 

public class Main {
    public static void main(String args[]) {
        Student S = new Student();
        Scanner s = new Scanner(System.in);
        System.out.println("Enter Rollno. : ");
        int rollno = s.nextInt();
        System.out.println("Enter Name : ");
        String name = s.next();
        
        S.setData(rollno, name);
        S.showData();
    }
    
}


34.	Create a class Circle that has two data members, one to store the radius and another to store area and three methods 
first init() method to input radius from user, second calculateArea() method to calculate area of circle and third display() method to display 
values of radius and area. Create class CircleDemo ( main class) that creates the Circle object and calls init(), calculateArea() and display() methods.
->
import java.lang.*;
import java.util.*;

class Circle {
    int r;
    double area;
        
        void init() {
            Scanner s = new Scanner(System.in);
            System.out.println("Enter Radius : ");
            int r = s.nextInt();
            this.r = r;
        }
        
        void calculateArea()    {
            area = 3.14 * r * r; 
        }
        
        void display()  {
            System.out.println("Area : " + area);
        }
        
    }

public class Main {
    public static void main(String args[]) {
        Circle S = new Circle();
        S.init();
        S.calculateArea();
        S.display();
        
    }
    
}



35.	Create a class MathOperation that has four static methods. add() method that takes two integer numbers as parameter and returns the sum 
of the numbers. subtract() method that takes two integer numbers as parameter and returns the difference of the numbers. multiply() method that
takes two integer numbers as parameter and returns the product. power() method that takes two integer numbers as parameter and returns the power 
of first number to second number. Create another class Demo (main class) that takes the two numbers from the user and calls all four methods of 
MathOperation class by providing entered numbers and prints the return values of every method.
->
import java.lang.*;
import java.util.*;

class MathOperation {
    static int add(int a, int b)    {
        return (a+b);
    }
    
    static int subtract(int a, int b)    {
        return (a-b);
    }
    
    static int multiply(int a, int b)    {
        return (a*b);
    }
    
    static double power(int a, int b)    {
        return (Math.pow(a,b));
    }
}

public class Main {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter 1st number : ");
        int a = s.nextInt();
        System.out.println("Enter 2st number : ");
        int b = s.nextInt();
        MathOperation m = new MathOperation();
        System.out.println("Addition : " + m.add(a, b));
        System.out.println("Subtract : " + m.subtract(a, b));
        System.out.println("Multiply : " + m.multiply(a, b));
        System.out.println("Power : " + m.power(a, b));
        
    }
    
}



36.	Create a class MathOperation containing overloaded methods ‘multiply’ to calculate multiplication of following arguments. 
a.	 two integers 
b.	 three floats 
c.	 all elements of array 
d.	one double and one integer 
->
import java.lang.*;
import java.util.*;

class MathOperation {
    int multiply(int a, int b)    {
        return (a*b);
    }
    
    float multiply(float a, float b, float c)    {
        return (a*b*c);
    }
    
    int multiply(int arr[])    {
        int mul = 1;
        for(int i=0; i<arr.length; i++)
            mul = mul * arr[i];
        return (mul);
    }
    
    double multiply(double a, int b)    {
        return (a*(double)b);
    }
}

public class Main {
    public static void main(String args[]) {
        MathOperation m = new MathOperation();
        int arr[] = {10, 20, 30}; 
        System.out.println("Multiplication of integer : " + m.multiply(10, 20));
        System.out.println("Multiplication of float : " + m.multiply(10.24f, 12.3f, 15.5f));
        System.out.println("Multiplication of int array : " + m.multiply(arr));
        System.out.println("Multiplication of double, int : " + m.multiply(10.35, 3));
        
    }
    
}



37.	Create a class Person with properties (name and age) with following features. 
a.	Default age of person should be 18.
b.	A person object can be initialized with name and age.
c.	Method to display name and age of person
Create another class PersonDemo ( main class ) that demonstrates the functionalities of Person class by creating Person object and calling methods.
->
import java.lang.*;
import java.util.*;

class Person {
    String name;
    int age;
    
    Person()    {
        name = "ABC";
        age = 18;
    }
    
    Person(String name, int age)    {
        this.name = name;
        this.age = age;
    }
    
    void display() {
        System.out.println("Name : "+name+"\nAge : "+age);
    }
} 

public class Main {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        
        System.out.println("Enter Name. : ");
        String name = s.next();
        System.out.println("Enter Age : ");
        int age = s.nextInt();
        Person S = new Person(name, age);
        S.display();
    }
    
}



38.	Create a class Employee with three data members (empNo, salary and totalSalary) and following features.
a.	Only parameterized constructor. [Do not overload the constructor]
b.	totalSalary always represents salary total of all the employees created.
c.	empNo should be auto incremented.
d.	display total employees and totalSalary using a method.
Create another class EmployeeDemo (main class) that creates some Employee objects and calls Employee method to display no. of employees and 
total of their salaries.
->
import java.lang.*;
import java.util.*;

class Employee {
    static int empNo, totalSal; 
    int sal;
    
    Employee(int sal)   {   
        empNo++;
        this.sal = sal;
        totalSal = totalSal + sal;
    }
    
    void display() {
        System.out.println("Total Employees : "+empNo+"\nTotal Salaries : "+totalSal);
    }
} 

public class Main {
    public static void main(String args[]) {
        
        Employee S1 = new Employee(20000);
        Employee S2 = new Employee(40000);
        Employee S3 = new Employee(120000);
        S3.display();
    }
    
}


39.	Create class Product with three data members (pid, price, quantity) and parameterized constructor that takes values for all 
three data members.  Create a main method in different class (say ProductDemo) and perform following task:
a. Accept information for five Product objects from user and store objects in an array
b. Find pid of product with highest price. 
c. Create a static method (with array of product’s object as argument) in Product class to calculate and return total amount spent on all 
products. ( amount spent on single product = price of product * quantity of product )
->

import java.lang.*;
import java.util.*;

class Product { 
    int pid, price, qty;
    
    Product()   {
        
    }
    
    Product(int pid, int price, int qty)   {   
        this.pid = pid;
        this.price = price;
        this.qty = qty;
    }
    
    static double cost(Product a[])   {
        int total = 0;
        for(int i=0; i<a.length; i++)
            total = total + a[i].price * a[i].qty;
        return total;
    }
    
    void display() {
        System.out.println("\n\nPId : " + pid + "\nPrice : " + price + "\nQuantity : " + qty);
    }
} 

public class Main {
    public static void main(String args[]) {
        Scanner s = new Scanner(System.in);
        Product arr[] = new Product[5];
        for(int i=0; i<arr.length; i++)  {
            System.out.println("\nEnter PId : ");
            int a = s.nextInt();
            System.out.println("\nEnter Price : ");
            int b = s.nextInt();
            System.out.println("\nEnter Quantity : ");
            int c = s.nextInt();
            Product p = new Product(a,b,c);
            arr[i] = p;
        }
        Product p = new Product();        
        double total = p.cost(arr);
        
        int max = arr[0].price, id = 0;
        for(int i=1; i<arr.length; i++) {
            if(arr[i].price > max)  {
                max = arr[i].price;
                id = arr[i].pid;
            }
        }
        System.out.println("Highest Price PId = "+id);
        System.out.println("Total Price = "+total);
    }
    
}




40.	Create a class Student having data members name, roll no., age and score. Write a program to 
accept 10 records of student and store them in an array. And then arrange the student records based on 
the score group [0-50], [50-65], [65-80], [80-100].
->
import java.lang.*;
import java.util.*;

class Student{
    int rollno, age, score;
    String name;
    
    Student(int rollno, String name, int age, int score){
        this();
        this.rollno = rollno;
        this.name = name;
        this.age = age;
        this.score = score;
    }
    
    Student(){
        rollno = 0;
        name = " ";
        age = 0;
        score = 0;
    }
    
}
public class Main
{
	public static void main(String[] args) {
	    Scanner s = new Scanner(System.in);
	    Student arr[][] = new Student[4][];
	    for(int i=0; i<2; i++){
	        System.out.println("\nEnter RollNo. : ");
	        int rollno = s.nextInt();
	        System.out.println("Enter Name : ");
	        s.nextLine();
	        String name = s.nextLine();
	        System.out.println("Enter Age : ");
	        int age = s.nextInt();
	        System.out.println("Enter Score : ");
	        int score = s.nextInt();
	        Student S = new Student(rollno,name,age,score);
	        if(score > 0 && score < 51){
	            arr[0] = new Student[50];
	            for(int j=0; j<arr[0].length; j++){
	                if(arr[0][j] == null){
	                    arr[0][j] = S;
	                    break;
	                }
	            }
	        }
	        
	        else if(score > 50 && score < 65){
	            arr[1] = new Student[15];
	            for(int j=0; j<arr[1].length; j++){
	                if(arr[1][j] == null){
	                    arr[1][j] = S;
	                    break;
	                }
	            }
	        }
	        
	        else if(score > 64 && score < 80){
	            arr[2] = new Student[15];
	            for(int j=0; j<arr[2].length; j++){
	                if(arr[2][j] == null){
	                    arr[2][j] = S;
	                    break;
	                }
	            }
	        }
	        
	        else{
	            arr[3] = new Student[20];
	            for(int j=0; j<arr[3].length; j++){
	                if(arr[3][j] == null){
	                    arr[3][j] = S;
	                    break;
	                }
	            }
	       }
	       
	    }
	    
	    for(int i=0; i<arr.length; i++){
	        for(int j=0; j<arr[i].length; j++){
	            System.out.println(arr[i][j].rollno+" "+arr[i][j].score);
	        }
	    }
	}
}



41.	Write a program to demonstrate this() construct functionality.
->
import java.lang.*;
import java.util.*;

class Student{
    int rollno, age, score;
    String name;
    
    Student(int rollno, String name, int age, int score){
        this();
        this.rollno = rollno;
        this.name = name;
        this.age = age;
        this.score = score;
    }
    
    Student(){
        rollno = 0;
        name = " ";
        age = 0;
        score = 0;
    }
    
}
public class Main
{
	public static void main(String[] args) {
	    Scanner s = new Scanner(System.in);
	    System.out.println("\nEnter RollNo. : ");
	    int rollno = s.nextInt();
	    System.out.println("Enter Name : ");
	    s.nextLine();
	    String name = s.nextLine();
	    System.out.println("Enter Age : ");
	    int age = s.nextInt();
	    System.out.println("Enter Score : ");
	    int score = s.nextInt();
	    Student S = new Student(rollno,name,age,score);
	}
}



42.	Create a class Tile to store the edge length of a square tile, and create another class Floor to 
store length and width of a rectangular floor. Add method totalTiles(Tile t) in Floor class with Tile 
as argument to calculate the whole number of tiles needed to cover the floor completely.
->
import java.util.*;

class Tile{
    int side;
    
    public Tile(int side){
        this.side = side;
    }
}

class Floor{
    private int length;
    private int width;
    
    public Floor(int length, int width){
        this.length = length;
        this.width = width;
    }
    
    int totalTiles(Tile T){
        int tiles = 1;
        tiles = (length * width)/ T.side;
        return tiles;
    }
}

public class Main
{
	public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter Length of Floor : ");
        int a = s.nextInt();
        System.out.println("Enter Width of Floor : ");
        int b = s.nextInt();
        
        Floor f = new Floor(a,b);
        System.out.println("Enter Side of Tile : ");
        int c = s.nextInt();
        Tile t = new Tile(c);
        
        System.out.println("Tiles required : "+f.totalTiles(t));
	}
}



43.	Create a class OneBHK with instance variables roomArea, hallArea and price. Then create default 
constructor that initializes instance variables with some values and a parameterized constructor that 
takes values for all instance variables and stores them in instance variables. Now create a method named 
show()  to print OneBHK’s instance variable values.
Create another class TwoBHK which has (inherites) all the properties and behaviors of OneBHK and a new 
instance variable room2Area. Then create default constructor to initialize all 4 instance variables and 
a parameterized constructor to take the values for initialization of all instance variables. Override 
show() method to print all data member information.

Write main method in another class (Say Demo) and store three TwoBHK flat’s information and print 
information using show method. Also print total amount of all flats. 
->
import java.util.*;

class OneBHK{
    int roomArea, hallArea;
    double price;
    
    public OneBHK(int roomArea, int hallArea, double price){
        this.roomArea = roomArea;
        this.hallArea = hallArea;
        this.price = price;
    }
    
    void show(){
        System.out.println("Room Area = "+roomArea);
        System.out.println("Hall Area = "+hallArea);    
        System.out.println("Price = "+price);
    }
    
}

class TwoBHK extends OneBHK{
    int roomArea2;
    
    public TwoBHK(int roomArea, int hallArea, double price, int roomArea2){
        super(roomArea,hallArea,price);
        this.roomArea2 = roomArea2;
    }
    
    void show(){
        System.out.println("Room Area = "+roomArea);
        System.out.println("Room-2 Area = "+roomArea2);
        System.out.println("Hall Area = "+hallArea);    
        System.out.println("Price = "+price);
    }
}

public class Main
{
	public static void main(String[] args) {
        Scanner s = new Scanner(System.in);
        System.out.println("Enter Room Area : ");
        int a = s.nextInt();
        System.out.println("Enter Room-2 Area : ");
        int b = s.nextInt();
        System.out.println("Enter Hall Area : ");
        int c = s.nextInt();
        System.out.println("Enter Price Area : ");
        double d = s.nextDouble();
        
        TwoBHK b1 = new TwoBHK(a,b,d,c);
        TwoBHK b2 = new TwoBHK(300,200,7856300,270);
        TwoBHK b3 = new TwoBHK(350,220,8010300,270);
        
        System.out.println("Total Amount of 3 Flats : "+(b1.price+b2.price+b3.price));
	}
}




